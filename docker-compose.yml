services:
  n8n:
    image: n8nio/n8n
    container_name: n8n
    restart: always
    environment:
      - N8N_HOST=${N8N_HOST}
      - N8N_PROTOCOL=https
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
      - WEBHOOK_URL=${WEBHOOK_URL}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./data/n8n:/home/node/.n8n
    networks:
      - web
    depends_on:
      - postgres
  
  # n8n-backup:
  n8n-backup:
    image: alpine:latest
    container_name: n8n_backup
    volumes:
      - ./data/n8n:/data/n8n:ro
      - ./backups:/backups
      - ./back-up.sh:/back-up.sh
    entrypoint: ["/bin/sh", "-c"]
    command: >
      apk update &&
      apk add bash tar findutils &&
      chmod +x /back-up.sh &&
      /back-up.sh
    restart: unless-stopped


  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - web

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN}
    networks:
      - web
    cap_add:
    - NET_ADMIN

networks:
  web:
    driver: bridge
